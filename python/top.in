#!@PYTHON@

import os
import shutil as sh
import numpy as np

version = '@VERSION@'

def _error(msg):
    raise Exception(msg)

def get_compiled_files():
    """
    Get the list of compiled equation files (that can be loaded with
    :py:func:`load`)

    :rtype: [str]
    :return: List of compiled equation files
    """
    files = []
    for dirpath, dirnames, filenames in os.walk('@abs_top_builddir@/src/lib'):
        for filename in filenames:
            if not filename.startswith('lib') and filename.endswith('.so'):
                files.append(filename[0:-3])
    return files

def get_from_dati(key):
    """
    Get a parameter from the dati file

    :param str key: Name of the parameter to read
    :rtype: str
    :return: Value of the parameter in the file
    """
    f = open(datifile)
    for line in f.readlines():
        if key in line:
            index = line.find('=')
            eindex = line.find('#')
            return line[index+1:eindex].strip()
    print(key + ' not found in ' + datifile)
    return None

def load(name):
    """
    Load a compiled equation file

    :param str name: Name of the compiled equation file
    """
    import os
    import sys
    import importlib

    sys.path.append('@abs_top_builddir@/src/lib/')
    global libtop
    libtop = importlib.import_module(name)

def get_lib_version():
    """
    Get loaded library TOP version
    """
    if libtop == None:
        _error('no library loaded')
        return

    return libtop.toppy.get_version().strip()

def read_dati(dati):
    """
    Read a 'dati' file and initialize internal variables with values defined in it

    :param str dati: File to read
    """
    if os.access(dati, os.F_OK):
        global datifile
        datifile = dati
        libtop.toppy.read_dati(dati)
    else:
        _error('%s: not such file' % dati)

def run_arncheb(shift):
    """
    Run the Arnoldi-Chebyshev method

    :param float shift: Initial shift
    """
    if libtop == None:
        _error('No library loaded')
        return

    libtop.toppy.init_arncheb()
    libtop.toppy.py_run_arncheb(shift)
    return

def _get_nsol():
    return libtop.toppy.get_nsol_out()

def _get_adim():
    return libtop.toppy.get_adim()

def get_valps():
    """
    Retrieve eigenvalues computed by :py:func:`top.run_arncheb`

    :rtype: numpy.ndarray
    :return: An array of eigenvalue
    """
    if libtop == None:
        _error('No library loaded')
        return
    n = _get_nsol()
    dtype = get_dtype()
    if dtype == 'real':
        valps = libtop.toppy.get_valps_real(n)
    elif dtype == 'cplx':
        valps = libtop.toppy.get_valps_cplx(n)
    else:
        _error('Unknown type `%s\'' % dtype)
    return  valps

def get_dtype():
    return libtop.toppy.dtype().strip()

def get_vecps():
    """
    Return the eigenvectors computed by :py:func:`top.run_arncheb`

    :rtype: numpy.ndarray
    :return: An array of eigenvector
    """
    if libtop == None:
        _error('No library loaded')
        return

    n = _get_nsol()
    adim = _get_adim()

    dtype = get_dtype()
    if dtype == 'real':
        vecps = libtop.toppy.get_vecps_real(n, adim)
    elif dtype == 'cplx':
        vecps = libtop.toppy.get_vecps_cplx(n, adim)
    else:
        _error('Unknown type `%s\'' % dtype)
    return vecps

def init_model(filename):
    """
    Initialize the model by calling the Fortran routine init_model of the model
    compiled with the equation file currently loaded.

    :param str filename: Filename or directory to read in order to initialize the model
    """
    if libtop == None:
        _error('No library loaded')
        return

    libtop.toppy.py_init_model(filename)

def get_grid():
    """
    Return the grid

    :rtype: numpy.ndarray
    :return: The grid of the model
    """
    if libtop == None:
        _error('No library loaded')
        return
    nr = libtop.toppy.get_nr()
    return libtop.toppy.get_grid(nr)

