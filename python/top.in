#!@PYTHON@

import os as _os
import sys as _sys
import numpy as _np
import h5py as _h5py
import importlib as _importlib
import matplotlib.pyplot as _plt
from distutils.dir_util import mkpath as _mkpath

version = '@VERSION@'

_sys.path.append('@abs_top_builddir@/src/')
import legpy as _legpy
leg = _legpy.legpy

def _error(msg):
    raise Exception(msg)

class model:
    filename = ''
    libmodel = None
    def __init__(self, libmodel, filename):
        if type(filename) == str:
            self.filename = filename
        else:
            self.filename = filename.tostring().strip()
        self.libmodel = libmodel
        self.libmodel.py_init_model(filename)

    def __getitem__(self, name):
        n1, n2 = self.libmodel.get_field_size(name)
        return self.libmodel.get_field(name, n1, n2)


class results:
    valps = []
    vecps = []
    l = []
    nsol = 0
    modelfile = None
    shift = 0
    lres = 0
    libname = None
    dati = {}
    ndom = 0
    vars = []
    nr = []
    zeta = []
    r = []
    theta = []

    def __init__(self, result_file = ''):
        if result_file != '':
            self.from_file(result_file)

    def from_file(self, h5result):

        f = _h5py.File(h5result, 'r')
        self.nsol = len(f['/']) - 2 # minus r and theta fields
        self.modelfile = f.attrs['modelfile']
        self.shift = f.attrs['shift']
        self.lres = f.attrs['lres']
        self.libname = f.attrs['eq']
        for k, v in f.attrs.items():
            self.dati[k] = v
        self.ndom = len(f['sol0'].keys())

        zeta = []
        for isol in range(0, self.nsol):
            self.vecps.append([])
            self.l.append([])
            sgrp = f['/sol%d' % (isol)]
            self.valps.append(sgrp.attrs['valp'])
            for idom in range(0, self.ndom):
                valp = {}
                vecps = {}
                ls = {}
                vars = []
                grp = f['/sol%d/dom%d' % (isol, idom)]
                if isol == 0:
                    dom_grid = grp.attrs['zeta']
                    self.nr.append(len(dom_grid))
                    zeta.append(dom_grid)
                for var in grp.keys():
                    vars.append(var)
                    vdset = f['/sol%d/dom%d/%s' % (isol, idom, var)]
                    vecps[var] = vdset[:, :]
                    ls[var] = vdset.attrs['l']

                self.vecps[-1].append(vecps)
                self.l[-1].append(ls)
                if isol == 0:
                    self.vars.append([])
                    self.vars[-1] = vars

        self.zeta = _np.zeros(shape = sum(self.nr))
        for idom in range(0, self.ndom):
            skip = sum(self.nr[0:idom])
            self.zeta[skip:skip+self.nr[idom]] = _np.array(zeta[idom])
        self.r = f['/r'][:, :]
        self.theta = f['/theta'][:]
        f.close()

    def get_sol(self, idom, isol, var):
        valp = self.valps[isol]
        vecp = self.vecps[isol][idom][var]
        l = self.l[isol][idom][var]
        return valp, vecp, l

    def get_grid(self, idom = -1):
        if idom >= 0:
            skip = 0
            for i in range(0, idom):
                nr = self.nr[i]
                skip = skip + nr
            nr = self.nr[idom]
            return self.r[skip:skip+nr], self.theta
        else:
            return self.r, self.theta

    def save(self, h5file):
        f = _h5py.File(h5file, 'w')
        f.attrs['modelfile'] = self.modelfile
        f.attrs['shift'] = self.shift
        f.attrs['lres'] = self.lres
        f.attrs['eq'] = self.libname
        for k, v in self.dati.items():
            if v.dtype == _np.dtype('S1'):
                f.attrs[k] = v.tostring().strip()
            else:
                f.attrs[k] = v
        valp = 0.0
        f.create_dataset('r', data = self.r)
        f.create_dataset('theta', data = self.theta)
        for isol in range(0, self.nsol):
            sgrp = f.create_group('sol%d' % isol)
            skip = 0
            for idom in range(0, self.ndom):
                nr = self.nr[idom]
                dgrp = sgrp.create_group('dom%d' % idom)
                dgrp.attrs['zeta'] = self.zeta[skip:skip+nr]
                skip = skip + nr
                for var in self.vars[idom]:
                    valp, vecp, l = self.get_sol(idom, isol, var)
                    dset = dgrp.create_dataset(var, data = vecp)
                    dset.attrs['l'] = l
            sgrp.attrs['valp'] = valp
        f.close()

    def plot_val(self, mat):
        r, theta = self.get_grid()
        cost = _np.cos(theta)
        sint = _np.sin(theta)

        # fg = vec
        x = r * sint
        y = r * cost

        _plt.pcolormesh(x, y, mat)
        # _plt.colorbar()
        _plt.show()

    def plot(self, idom, isol, var, m=0):
        """
        Plots isol'th solution of variable var in domain number idom

        :param int idom: domain
        :param int isol: solution to plot
        :param str var: variable to plot
        """
        val, vec, l = self.get_sol(idom, isol, var)

        r, theta = self.get_grid(idom)
        cost = _np.cos(theta)
        sint = _np.sin(theta)

        # fg = vec
        fg = leg.eval2d(vec, cost, l[0], 2, m)

        x = r * sint
        y = r * cost

        _plt.pcolormesh(x, y, fg)
        _plt.title(var)
        # _plt.colorbar()
        _plt.show()

    def read_model(self):
        p = load(self.libname)
        p.dati.lres = self.lres
        return p.init_model(self.modelfile)


def get_compiled_files():
    """
    Get the list of compiled equation files (that can be loaded with
    :py:func:`load`)

    :rtype: [str]
    :return: List of compiled equation files
    """
    files = []
    for dirpath, dirnames, filenames in _os.walk('@abs_top_builddir@/src/lib'):
        for filename in filenames:
            if not filename.startswith('lib') and filename.endswith('.so'):
                files.append(filename[0:-3])
    return files

class load:
    lib = None
    name = None
    dati = None
    modelfile = ''
    libmodel = None
    shift = 0

    def __init__(self, name):
        if not '@abs_top_builddir@/src/lib/' in _sys.path:
            _sys.path.append('@abs_top_builddir@/src/lib/')
        lib = _importlib.import_module(name)
        self.lib = lib.toppy
        self.libmodel = lib.modelpy
        lib.toppy.init_dati()
        self.name = name
        self.dati = lib.inputs

    def get_version(self):
        return self.lib.get_version().strip()

    def read_dati(self, filename):
        self.lib.read_dati(filename)

    def init_model(self, filename):
        self.modelfile = filename
        self.model = model(self.libmodel, filename)
        return self.model

    def run_arncheb(self, shift):
        if self.modelfile != '':
            self.lib.init_arncheb()
            self.shift = shift
            self.lib.py_run_arncheb(shift)
            return self.get_results()
        else:
            _error('model not initialized')

    def get_grid(self):
        nr, nt = self.lib.get_grid_size()
        return self.lib.get_grid(nr, nt)

    def get_zeta(self):
        nr, _ = self.lib.get_grid_size()
        return self.lib.get_zeta(nr)

    def get_sol(self, idom, isol, var):
        nr, nt = self.lib.get_solsize(idom+1)
        valp, vecp = self.lib.get_sol_real(idom+1, isol+1, var, nr, nt)
        l = self.lib.pyget_lvar(idom+1, var, nt)
        return valp, vecp, l

    def get_vars(self, idom):
        nvars = self.lib.get_nvars(idom+1)
        ret = []
        for i in range(0, nvars):
            v = self.lib.get_var_name(idom+1, i+1)
            ret.append(v.strip())
        return ret

    def get_results(self):
        res = results()
        res.nsol = self.lib.get_nsol_out()
        res.ndom = self.lib.get_ndom()
        res.valps = []
        res.vecps = []
        res.l = []
        res.vars = []
        res.shift = self.shift
        res.modelfile = self.modelfile
        res.nr = []
        res.r, res.theta = self.get_grid()
        res.zeta = self.get_zeta()
        res.lres = self.dati.lres
        res.libname = self.name
        res.dati = {}
        d = vars(self.dati).items()
        for i in range(len(d)):
            k, v = d[i]
            if type(v) == _np.ndarray:
                res.dati[k] = v

        for idom in range(0, res.ndom):
            res.vars.append(self.get_vars(idom))
            res.nr.append(self.lib.get_dom_nr(idom+1))

        for isol in range(0, res.nsol):
            res.valps.append(0.0)
            res.vecps.append([])
            res.l.append([])
            for idom in range(0, res.ndom):
                vecps = {}
                ls = {}
                for var in res.vars[idom]:
                    valp, vecp, l = self.get_sol(idom, isol, var)
                    vecps[var] = vecp
                    ls[var] = l
                res.vecps[-1].append(vecps)
                res.l[-1].append(ls)
            res.valps[isol] = valp

        return res

    def get_dtype(self):
        return self.lib.dtype().strip()
