#!@PYTHON@

import os as _os
import sys as _sys
import numpy as _np
import h5py as _h5py
import importlib as _importlib
import matplotlib.pyplot as _plt
from distutils.dir_util import mkpath as _mkpath

version = '@VERSION@'

_sys.path.append('@abs_top_builddir@/src/')
import legpy as _legpy
leg = _legpy.legpy

def _error(msg):
    raise Exception(msg)


class model:
    """
    This class storing a star model

    access to fields of the model can be achieved with square bracket operator.
    But you need to know the fields stored in your model.

    :example:
        m['w'] # access the field omega of the model `m`
    """
    filename = ''
    libmodel = None
    def __init__(self, libmodel, filename):
        if type(filename) == str:
            self.filename = filename
        else:
            self.filename = filename.tostring().strip()
        self.libmodel = libmodel
        self.libmodel.py_init_model(filename)

    def __getitem__(self, name):
        n1, n2 = self.libmodel.get_field_size(name)
        return self.libmodel.get_field(name, n1, n2)


class results:
    """
    This class stores results of a previous computation

    :param str result_file: (optional) file with previous results stored
    :rtype: :py:class:`results` object
    :return: results of a previous computation (if result_file is provided) an empty results object otherwise
    """

    def __init__(self, result_file = ''):
        self.valps = []
        self.vecps = []
        self.l = []
        self.nsol = 0
        self.modelfile = None
        self.shift = 0
        self.lres = 0
        self.libname = None
        self.dati = {}
        self.ndom = 0
        self.vars = []
        self.nr = []
        self.zeta = []
        self.r = []
        self.theta = []
        if result_file != '':
            self._from_file(result_file)

    def _from_file(self, h5result):

        f = _h5py.File(h5result, 'r')
        self.nsol = len(f['/']) - 2 # minus r and theta fields
        self.modelfile = f.attrs['modelfile']
        self.shift = f.attrs['shift']
        self.lres = f.attrs['lres']
        self.libname = f.attrs['eq']
        for k, v in f.attrs.items():
            self.dati[k] = v
        self.ndom = len(f['sol0'].keys())

        zeta = []
        for isol in range(0, self.nsol):
            self.vecps.append([])
            self.l.append([])
            sgrp = f['/sol%d' % (isol)]
            self.valps.append(sgrp.attrs['valp'])
            for idom in range(0, self.ndom):
                valp = {}
                vecps = {}
                ls = {}
                vars = []
                grp = f['/sol%d/dom%d' % (isol, idom)]
                if isol == 0:
                    dom_grid = grp.attrs['zeta']
                    self.nr.append(len(dom_grid))
                    zeta.append(dom_grid)
                for var in grp.keys():
                    vars.append(var)
                    vdset = f['/sol%d/dom%d/%s' % (isol, idom, var)]
                    vecps[var] = vdset[:, :]
                    ls[var] = vdset.attrs['l']

                self.vecps[-1].append(vecps)
                self.l[-1].append(ls)
                if isol == 0:
                    self.vars.append([])
                    self.vars[-1] = vars

        self.zeta = _np.zeros(shape = sum(self.nr))
        for idom in range(0, self.ndom):
            skip = sum(self.nr[0:idom])
            self.zeta[skip:skip+self.nr[idom]] = _np.array(zeta[idom])
        self.r = f['/r'][:, :]
        self.theta = f['/theta'][:]
        f.close()

    def append(self, res):
        """
        appends results stored in res
        """
        self.nsol = self.nsol + res.nsol
        for isol in range(0, res.nsol):
            self.valps.append(res.valps[isol])
            self.vecps.append(res.vecps[isol])
            self.l.append(res.l[isol])

    def get_sol(self, idom, isol, var):
        """
        returns the `isol` th solution in domain number `idom` for variable
        named `var`

        :rtype: tuple (eigenvalue, eigenvector, Legendre degree)
        :return: eigenvalue, eigenvector of the solution. The solution is given in spectral space (Legendre), so the of the degrees of Legendre polynomial are also returned
        :param int idom: domain index of the solution
        :param int isol: solution number
        :param str var: variable name
        """
        valp = self.valps[isol]
        vecp = self.vecps[isol][idom][var]
        l = self.l[isol][idom][var]
        return valp, vecp, l

    def get_grid(self, idom = -1):
        """
        returns the grid used by the model (requires a call to init_model)

        if `idom` is provided returns the grid only for this particular domain
        """
        if idom >= 0:
            skip = 0
            for i in range(0, idom):
                nr = self.nr[i]
                skip = skip + nr
            nr = self.nr[idom]
            return self.r[skip:skip+nr], self.theta
        else:
            return self.r, self.theta

    def save(self, h5file, ids = []):
        """
        saves the results in HDF5 format in file named `h5file`
        """
        f = _h5py.File(h5file, 'w')
        for k, v in self.dati.items():
            if type(v) == _np.ndarray and v.dtype == _np.dtype('S1'):
                f.attrs[k] = v.tostring().strip()
            else:
                f.attrs[k] = v
        f.attrs['shift'] = self.shift
        f.attrs['lres'] = self.lres
        f.attrs['eq'] = self.libname
        f.attrs['modelfile'] = self.modelfile

        valp = 0.0
        f.create_dataset('r', data = self.r)
        f.create_dataset('theta', data = self.theta)
        if ids == []:
            id_range = range(0, self.nsol)
        else:
            id_range = ids
        for ii, isol in enumerate(id_range):
            sgrp = f.create_group('sol%d' % ii)
            skip = 0
            for idom in range(0, self.ndom):
                nr = self.nr[idom]
                dgrp = sgrp.create_group('dom%d' % idom)
                dgrp.attrs['zeta'] = self.zeta[skip:skip+nr]
                skip = skip + nr
                for var in self.vars[idom]:
                    valp, vecp, l = self.get_sol(idom, isol, var)
                    dset = dgrp.create_dataset(var, data = vecp)
                    dset.attrs['l'] = l
            sgrp.attrs['valp'] = valp
        f.close()

    def plot_val(self, mat):
        """
        Plots the values stored in `mat`

        :param matrix mat: function to be plotted
        """
        r, theta = self.get_grid()
        cost = _np.cos(theta)
        sint = _np.sin(theta)

        # fg = vec
        x = r * sint
        y = r * cost

        _plt.pcolormesh(x, y, mat)
        # _plt.colorbar()
        _plt.show()

    def plot(self, idom, isol, var, m=None):
        """
        Plots isol'th solution of variable var in domain number idom

        :param int idom: domain number
        :param int isol: solution to plot
        :param str var: variable to plot
        """
        val, vec, l = self.get_sol(idom, isol, var)

        r, theta = self.get_grid(idom)
        cost = _np.cos(theta)
        sint = _np.sin(theta)

        # fg = vec
        if m == None:
            m = self.dati['m']
        fg = leg.eval2d(vec, cost, l[0], 2, m)

        x = r * sint
        y = r * cost

        _plt.pcolormesh(x, y, fg)
        _plt.title(var)
        # _plt.colorbar()
        _plt.show()

    def read_model(self):
        """
        Reads the model that was used to perform the computation

        :rtype: :py:class:`model` (see :ref:`model<model>`)
        :return: the model used to perform computation
        """
        p = load(self.libname)
        for k in self.dati.keys():
            p.dati.k = self.dati[k]
            r, t = self.get_grid()
            p.set_nt(len(t))
            p.set_nr(len(r))
        return p.init_model(self.modelfile)


def get_compiled_files():
    """
    Get the list of compiled equation files (that can be loaded with
    :py:func:`load`)

    :rtype: [str]
    :return: List of compiled equation files
    """
    files = []
    for dirpath, dirnames, filenames in _os.walk('@abs_top_builddir@/src/lib'):
        for filename in filenames:
            if not filename.startswith('lib') and filename.endswith('.so'):
                files.append(filename[0:-3])
    return files

class load:
    """
    Main class for running TOP:

    It is responsible for loading a previously compiled equation file,
    initializing the model and running the Arnoldi-Chebyshev algorithm

    :param str name: name of the equation filed to load

    :example:
        poly = load('eq_poly_ester')
    """
    lib = None
    name = None
    dati = None
    modelfile = ''
    libmodel = None
    shift = 0

    def __init__(self, name):
        if not '@abs_top_builddir@/src/lib/' in _sys.path:
            _sys.path.append('@abs_top_builddir@/src/lib/')
        lib = _importlib.import_module(name)
        self.lib = lib.toppy
        self.libmodel = lib.modelpy
        lib.toppy.init_dati()
        self.name = name
        self.dati = lib.inputs
        self.cfg = lib.cfg
        self.cfg.dump_asigma = False
        self.cfg.print_normA = False

    def get_version(self):
        """
        returns the version of TOP that compiled the currently loaded equation file
        """
        return self.lib.get_version().strip()

    def read_dati(self, filename):
        """
        reads dati parameter file named `filename`

        :param str filename: dati file to read
        """
        self.lib.read_dati(filename)

    def init_model(self, filename):
        """
        initializes the star model with the file `filename`

        :param str filename: file to read to initialize the star model
        """
        self.modelfile = filename
        self.model = model(self.libmodel, filename)
        return self.model

    def run_arncheb(self, shift):
        """
        runs the Arnoldi-Chebyshev algorithm with a shift provided by the
        `shift` argument.
        Calls call to run_arncheb must be preceded by a call to `read_dati` to
        initialize problem parameters and a call to `init_model` to initialize
        the start model.

        :param float shift: starts the Arnoldi-Chebyshev algorithm arnoud frequency given by shift
        :rtype: results object
        :return: the results of the Arnoldi-Chebyshev algorithm
        """
        if self.modelfile != '':
            self.lib.init_arncheb()
            self.shift = shift
            self.lib.py_run_arncheb(shift)
            return self.get_results()
        else:
            _error('model not initialized')

    def get_grid(self):
        """
        returns the grid used by the model (requires a call to init_model)

        :rtype: tuple (r, theta)
        :return: the grid coordinates `r` and `theta`
        """
        nr, nt = self.lib.get_grid_size()
        return self.lib.get_grid(nr, nt)

    def get_zeta(self):
        """
        returns the zeta radial coordinate

        :rtype: tuple (r, theta)
        :return: the grid coordinates `r` and `theta`
        """
        nr, _ = self.lib.get_grid_size()
        return self.lib.get_zeta(nr)

    def get_sol(self, idom, isol, var):
        """
        returns `isol` th solution in domain number `idom` for variable named
        `var`

        :rtype: tuple (eigenvalue, eigenvector, Legendre degree)
        :return: eigenvalue, eigenvector of the solution. The solution is given in spectral space (Legendre), so the of the degrees of Legendre polynomial are also returned
        :param int idom: domain index of the solution
        :param int isol: solution number
        :param str var: variable name
        """
        nr, nt = self.lib.get_solsize(idom+1)
        if self.lib.dtype() == "real":
            valp, vecp = self.lib.get_sol_real(idom+1, isol+1, var, nr, nt)
        else:
            valp, vecp = self.lib.get_sol_cplx(idom+1, isol+1, var, nr, nt)
        l = self.lib.pyget_lvar(idom+1, var, nt)
        return valp, vecp, l

    def get_vars(self, idom):
        """
        returns a list of variables in domain `idom`

        :rtype: [str]
        :return: list of variables in domain number idom
        :param int idom: domain index
        """
        nvars = self.lib.get_nvars(idom+1)
        ret = []
        for i in range(0, nvars):
            v = self.lib.get_var_name(idom+1, i+1)
            ret.append(v.strip())
        return ret

    def get_results(self):
        """
        returns an `result` object containing the results of a call to
        run_arncheb

        :rtype: results object
        :return: results of the previous call to run_arncheb
        """
        res = results()
        res.nsol = self.lib.get_nsol_out()
        res.ndom = self.lib.get_ndom()
        res.valps = []
        res.vecps = []
        res.l = []
        res.vars = []
        res.shift = self.shift
        res.modelfile = self.modelfile
        res.nr = []
        res.r, res.theta = self.get_grid()
        res.zeta = self.get_zeta()
        res.lres = self.dati.lres
        res.libname = self.name
        res.dati = {}
        d = vars(self.dati).items()
        for i in range(len(d)):
            k, v = d[i]
            if type(v) == _np.ndarray:
                res.dati[k] = v

        for idom in range(0, res.ndom):
            res.vars.append(self.get_vars(idom))
            res.nr.append(self.lib.get_dom_nr(idom+1))

        for isol in range(0, res.nsol):
            res.valps.append(0.0)
            res.vecps.append([])
            res.l.append([])
            for idom in range(0, res.ndom):
                vecps = {}
                ls = {}
                for var in res.vars[idom]:
                    valp, vecp, l = self.get_sol(idom, isol, var)
                    vecps[var] = vecp
                    ls[var] = l
                res.vecps[-1].append(vecps)
                res.l[-1].append(ls)
            res.valps[isol] = valp

        return res

    def get_dtype(self):
        return self.lib.dtype().strip()

    def write_output(self, dir):
        """
        write the results computed by run_arncheb to location `dir`, this for
        retro compatibility purpose
        """
        if dir[-1] != '/':
            dir = dir + '/'
        _mkpath(dir)
        self.lib.pywrite_output(dir)

    def set_nt(self, nt):
        self.lib.set_nt(nt)
        self.dati.nt = nt

    def set_nr(self, nr):
        self.lib.set_nr(nr)
