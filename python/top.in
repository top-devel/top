#!@PYTHON@

import os
import shutil as sh
import ctypes as ct
import numpy as np

version = '@VERSION@'

def _error(msg):
    raise Exception(msg)

def get_compiled_files():
    """
    Get the list of compiled equation files (that can be loaded with
    :py:func:`load`)

    :rtype: [str]
    :return: List of compiled equation files
    """
    files = []
    for dirpath, dirnames, filenames in os.walk('@abs_top_builddir@'):
        for filename in filenames:
            if not filename.startswith('lib') and filename.endswith('.so'):
                files.append(filename[0:-3])
    return files

def get_from_dati(key):
    """
    Get a parameter from the dati file

    :param str key: Name of the parameter to read
    :rtype: str
    :return: Value of the parameter in the file
    """
    f = open(datifile)
    for line in f.readlines():
        if key in line:
            index = line.find('=')
            eindex = line.find('#')
            return line[index+1:eindex].strip()
    print(key + ' not found in ' + datifile)
    return None

def load(name):
    """
    Load a compiled equation file

    :param str name: Name of the compiled equation file
    """
    global libtop
    global lib_read_inputs
    global lib_init_model
    global lib_init_a
    global lib_init_order
    global lib_init_bc_flag
    global lib_run_arncheb
    global lib_get_valps
    global lib_get_vecps
    global lib_get_nr
    global lib_get_grid
    global lib_get_version

    lib = '@abs_top_builddir@/src/lib/' + name + '.so'
    if not os.path.isfile(lib):
        _error('no such file: ' + lib)
        _error('did you run top-build?')
        libtop = None
        return
    libtop = ct.cdll.LoadLibrary(lib)
    lib_read_inputs     = libtop.read_inputs
    lib_init_model      = libtop.python_init_model
    lib_init_a          = libtop.init_a
    lib_init_order      = libtop.init_order
    lib_init_bc_flag    = libtop.init_bc_flag
    lib_run_arncheb     = libtop.run_arncheb
    lib_get_valps       = libtop.get_valps
    lib_get_vecps       = libtop.get_vecps
    lib_get_nr          = libtop.get_nr
    lib_get_grid        = libtop.get_grid
    lib_get_version     = libtop.get_version
    lib_version = get_version()
    if lib_version != version:
        print('[warning] - top module version: ' + version)
        print('          - library version:    ' + lib_version)
        print('         version mismatch, you could experience troubles.')
        print('         Try re-building your equation file.')

def get_version():
    """
    Get loaded library TOP version
    """
    if libtop == None:
        _error('no library loaded')
        return

    buf = ct.create_string_buffer(256)
    lib_get_version(ct.byref(buf), ct.byref(ct.c_int(256)))
    return buf.value.strip().decode()

def read_dati(dati):
    """
    Read a 'dati' file and initialize internal variables with values defined in it

    :param str dati: File to read
    """
    global datifile

    if libtop == None:
        _error('no library loaded')
        return
    datifile = dati
    if not type(dati) is str:
        _error('init takes a filename as parameter')
        return

    buf = ct.create_string_buffer(len(dati))
    buf.value = dati.encode()

    lib_read_inputs(ct.byref(buf), ct.byref(ct.c_int(len(dati))))

def _get_ndomains():
    if libtop == None:
        _error('No library loaded')
        return
    return int(ct.c_int.in_dll(libtop, 'ndomains').value)

def run_arncheb(shift):
    """
    Run the Arnoldi-Chebyshev method

    :param float shift: Initial shift
    """
    if libtop == None:
        _error('No library loaded')
        return
    if not type(shift) is float:
        _error('shift should be a float')
        return
    lib_init_a()
    lib_init_order()
    lib_init_bc_flag()
    lib_run_arncheb(ct.byref(ct.c_double(shift)))

def _get_nsol_out():
    if libtop == None:
        _error('No library loaded')
        return
    return int(ct.c_int.in_dll(libtop, '__eigensolve_MOD_nsol_out').value)

def _get_nsol():
    if libtop == None:
        _error('No library loaded')
        return
    return int(ct.c_int.in_dll(libtop, '__inputs_MOD_nsol').value)

def _get_a_dim():
    if libtop == None:
        _error('No library loaded')
        return
    return int(ct.c_int.in_dll(libtop, '__matrices_MOD_a_dim').value)

def get_valps():
    """
    Retrieve eigenvalues computed by :py:func:`top.run_arncheb`

    :rtype: numpy.ndarry
    :return: An array of eigenvalue
    """
    if libtop == None:
        _error('No library loaded')
        return
    n = _get_nsol_out()
    valps = np.zeros(shape=(n), dtype=np.double)
    lib_get_valps(valps.ctypes.data)
    return valps

def get_vecps():
    """
    Return the eigenvectors computed by :py:func:`top.run_arncheb`

    :rtype: numpy.ndarry
    :return: An array of eigenvector
    """
    if libtop == None:
        _error('No library loaded')
        return
    n = _get_nsol_out()
    a_dim = _get_a_dim()
    vecps = np.zeros(shape=(a_dim, n), dtype=np.double)
    lib_get_vecps(vecps.ctypes.data)
    return vecps

def init_model(filename):
    """
    Initialize the model by calling the Fortran routine init_model of the model
    compiled with the equation file currently loaded.

    :param str filename: Filename or directory to read in order to initialize the model
    """
    if libtop == None:
        _error('No library loaded')
        return
    buf = ct.create_string_buffer(len(filename))
    buf.value = filename.encode()

    lib_init_model(ct.byref(buf), ct.byref(ct.c_int(len(buf))))

def _get_nr():
    if libtop == None:
        _error('No library loaded')
        return
    nr = ct.c_int(0)
    lib_get_nr(ct.byref(nr))
    return nr.value

def get_grid():
    """
    Return the grid

    :rtype: numpy.ndarry
    :return: The grid of the model
    """
    if libtop == None:
        _error('No library loaded')
        return
    nr = _get_nr()
    grid = np.zeros(shape=(nr), dtype=np.double)
    lib_get_grid(ct.byref(ct.c_int(nr)), grid.ctypes.data)
    return grid

