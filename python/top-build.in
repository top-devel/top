#!@PYTHON@

import sys
import os
import shutil
import subprocess
import argparse

oldwd = os.getcwd()

def is_multi(f):
    if 'domains' in open(f).read():
        return True
    return False

def is_2D(f):
    if '$j1' in open(f).read():
        return True
    return False

def is_cplx(f):
    if 'termi' in open(f).read():
        return True
    if 'subi' in open(f).read():
        return True
    return False

parser = argparse.ArgumentParser()

parser.add_argument('mpi',
        nargs='?',
        choices=['mpi'],
        help='Enable MPI (default: disabled)')

parser.add_argument('file',
        help='equation file')

parser.add_argument('--model',
        required=True,
        help='input model (SCF, ester or poly)')

parser.add_argument('--debug', dest='debug', action='store_true',
        help='debug')
parser.set_defaults(debug=False)

args = parser.parse_args()

eqfile = args.file
if not os.path.isfile(eqfile):
    print("Error: file `" + eqfile + "' does not exists")
    parser.print_help()
    sys.exit(1)

# get abs path for equation file
eqfile = os.path.dirname(os.path.abspath(eqfile)) + "/" + os.path.basename(eqfile)
readeq = "@abs_top_builddir@/utils/readeq"

flags="top_flags="
if is_cplx(eqfile):
    readeq += "-cplx"
    flags += " -DUSE_COMPLEX"
else:
    readeq += "-real"

if is_2D(eqfile):
    readeq += "-2D"
else:
    readeq += "-1D"
    flags += " -DUSE_1D"

if is_multi(eqfile):
    readeq += "-multi"
    flags += " -DUSE_MULTI"
else:
    readeq += "-mono"

if args.mpi == "mpi":
    readeq += "-mpi"

# print("TOP flavor: " + readeq)
if not os.path.isfile(readeq):
    print("Error incompatible options")
    sys.exit(1)

if args.debug:
    sys.stdout.write("Building [DEBUG] " + os.path.basename(eqfile) + " (")
else:
    sys.stdout.write("Building " + os.path.basename(eqfile) + " (")
if is_cplx(eqfile):
    sys.stdout.write("complex ")
else:
    sys.stdout.write("real ")

if is_2D(eqfile):
    sys.stdout.write("2D ")
else:
    sys.stdout.write("1D ")

if is_multi(eqfile):
    sys.stdout.write("multi)")
else:
    sys.stdout.write("mono)")

sys.stdout.write(": ")
sys.stdout.flush()

try:
    subprocess.check_output(["make",
        "clean",
        "-C",
        "@abs_top_builddir@/src"],
        stderr=subprocess.STDOUT)

    os.chdir("@abs_top_builddir@/src")
    subprocess.check_output(["@PERL@", readeq, eqfile],
            stderr=subprocess.STDOUT)
    os.chdir(oldwd)

    subprocess.check_output(["make",
        "install",
        "-C",
        "@abs_top_builddir@/src",
        "model=" + args.model,
        flags],
        stderr=subprocess.STDOUT)

    subprocess.check_output(["mkdir",
        "-p",
        "@abs_top_builddir@/src/lib"],
        stderr=subprocess.STDOUT)

    shutil.copy('@libdir@/libtop.so',
            '@abs_top_builddir@/src/lib/' + os.path.basename(eqfile) + '.so')

    if args.debug == False:
        subprocess.check_output(["make",
            "uninstall",
            "-C",
            "@abs_top_builddir@/src"],
            stderr=subprocess.STDOUT)

    print("[OK]")
    if args.debug:
        print('Debug binary location: @abs_top_builddir@/src/debug/top-debug')
    sys.exit(0)

except subprocess.CalledProcessError as e:
    print("[Failed]")
    os.chdir(oldwd)
    f = open('top-build.err', 'w')
    print('Check `top-build.err\'')
    try:
        f.write(e.output.decode())
    except:
        f.write(e.output)
    f.close()
    sys.exit(1)

except Exception as e:
    print("[Failed]")
    print(e)
    sys.exit(1)

