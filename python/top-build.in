#!@PYTHON@

import sys
import os
import shutil
import subprocess
import argparse

logfilename = 'build-err.log'
devnull = open(os.devnull, 'w')
logfile = open(logfilename, 'w')

def is_multi(f):
    if 'domains' in open(f).read():
        return True
    return False

def is_2D(f):
    if '$j1' in open(f).read():
        return True
    return False

def is_cplx(f):
    if 'termi' in open(f).read():
        return True
    if 'subi' in open(f).read():
        return True
    return False

parser = argparse.ArgumentParser()

parser.add_argument('mpi',
        nargs='?',
        choices=['mpi'],
        help='Enable MPI (default: disabled)')

parser.add_argument('file',
        help='equation file')

parser.add_argument('--model',
        required=True,
        help='input model (SCF, ester or poly)')

args = parser.parse_args()

eqfile = args.file
if not os.path.isfile(eqfile):
    print("Error: file `" + eqfile + "' does not exists")
    parser.print_help()
    sys.exit(1)

# get abs path for equation file
eqfile = os.path.dirname(os.path.abspath(eqfile)) + "/" + os.path.basename(eqfile)
readeq = "@abs_top_builddir@/utils/readeq"

flags="top_flags="
if is_cplx(eqfile):
    readeq += "-cplx"
    flags += " -DUSE_COMPLEX"
else:
    readeq += "-real"

if is_2D(eqfile):
    readeq += "-2D"
else:
    readeq += "-1D"
    flags += " -DUSE_1D"

if is_multi(eqfile):
    readeq += "-multi"
    flags += " -DUSE_MULTI"
else:
    readeq += "-mono"

if args.mpi == "mpi":
    readeq += "-mpi"

# print("TOP flavor: " + readeq)
if not os.path.isfile(readeq):
    print("Error incompatible options")
    sys.exit(1)

sys.stdout.write("Building " + os.path.basename(eqfile) + " (")
if is_cplx(eqfile):
    sys.stdout.write("complex ")
else:
    sys.stdout.write("real ")

if is_2D(eqfile):
    sys.stdout.write("2D ")
else:
    sys.stdout.write("1D ")

if is_multi(eqfile):
    sys.stdout.write("multi)")
else:
    sys.stdout.write("mono)")

sys.stdout.write(": ")
sys.stdout.flush()

try:
    os.chdir("@abs_top_builddir@/src")
    subprocess.check_call(["make",
        "clean",
        "-C",
        "@abs_top_builddir@/src"],
        stdout=devnull,
        stderr=logfile)
    subprocess.check_call(["@PERL@", readeq, eqfile],
            stdout=devnull,
            stderr=logfile)

    subprocess.check_call(["make",
        "install",
        "-C",
        "@abs_top_builddir@/src",
        "model=" + args.model,
        "prefix=@abs_top_builddir@/src",
        flags],
        stdout=devnull,
        stderr=logfile)

    shutil.copy('@abs_top_builddir@/src/lib/libtop.so',
            '@abs_top_builddir@/src/lib/' + os.path.basename(eqfile) + '.so')
    print("[OK]")
except:
    print("[Failed]")
    print("check " + logfilename)

