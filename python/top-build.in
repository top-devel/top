#!@PYTHON@

import sys
import os
import shutil
import subprocess
import argparse

oldwd = os.getcwd()

def is_multi(f):
    if 'domains' in open(f).read():
        return True
    return False

def is_2D(f):
    if '$j1' in open(f).read():
        return True
    return False

def is_cplx(f):
    if 'termi' in open(f).read():
        return True
    if 'subi' in open(f).read():
        return True
    return False

parser = argparse.ArgumentParser()

parser.add_argument('--cplx',
        dest='cplx_opt', action='store_true',
        help='Forces usage of complex version')

parser.add_argument('--parser',
        dest='new_parser', action='store_true',
        help='Use new parser')

parser.add_argument('mpi',
        nargs='?',
        choices=['mpi'],
        help='Enable MPI (default: disabled)')

parser.add_argument('file',
        help='equation file')

parser.add_argument('--order',
        nargs=1,
        help='use an alternative `order.inc\' file')

parser.add_argument('--model',
        required=True,
        help='input model (ester or poly_ester, etc)')

parser.add_argument('--debug', dest='debug', action='store_true',
        help='debug')
parser.set_defaults(debug=False)

args = parser.parse_args()

eqfile = args.file
if not os.path.isfile(eqfile):
    print("Error: file `" + eqfile + "' does not exists")
    sys.exit(1)

# get abs path for equation file
eqfile = os.path.dirname(os.path.abspath(eqfile)) + "/" + os.path.basename(eqfile)

if args.new_parser:
    readeq = "/home/bputigny/Work/Code/top-parser/BUILD/bin/edl-top"
else:
    readeq = "@abs_top_builddir@/utils/readeq"

flags="top_flags="
f2py_def=''
if args.new_parser:
    flags += " -DUSE_REAL"
    f2py_def='-DUSE_REAL'
else:
    if is_cplx(eqfile) or args.cplx_opt:
        readeq += "-cplx"
        flags += " -DUSE_COMPLEX"
        f2py_def='-DUSE_COMPLEX'
    else:
        readeq += "-real"
        f2py_def='-DUSE_REAL'

    if is_2D(eqfile):
        readeq += "-2D"
    else:
        readeq += "-1D"
        flags += " -DUSE_1D"
        f2py_def+=' -DUSE_1D'

    if is_multi(eqfile):
        readeq += "-multi"
        flags += " -DUSE_MULTI"
        f2py_def+=' -DUSE_MULTI'
    else:
        readeq += "-mono"

    if args.mpi == "mpi":
        readeq += "-mpi"

if args.order:
    order = args.order[0]
    if not os.access('%s' % order, os.F_OK):
        print('Error: no such file `%s\'' % order)
        sys.exit(1)
else:
    if is_2D(eqfile):
        order = '@abs_top_srcdir@/src/order-default.inc'
    else:
        order = '@abs_top_srcdir@/src/order-default-1D.inc'

shutil.copy(order,
        '@abs_top_builddir@/src/order.inc')

if not os.access('@abs_top_srcdir@/src/model_%s.F90' % args.model, os.F_OK):
    print('Error: no model named `%s\'' % args.model)
    sys.exit(1)

# print("TOP flavor: " + readeq)
if not os.path.isfile(readeq):
    print("Error incompatible options (readeq: `%s\')" % readeq)
    sys.exit(1)

if args.debug:
    sys.stdout.write("Building [DEBUG] " + os.path.basename(eqfile) + " (")
else:
    sys.stdout.write("Building " + os.path.basename(eqfile) + " (")
if is_cplx(eqfile) or args.cplx_opt:
    sys.stdout.write("complex ")
else:
    sys.stdout.write("real ")

if is_2D(eqfile) or args.new_parser:
    sys.stdout.write("2D ")
else:
    sys.stdout.write("1D ")

if is_multi(eqfile):
    sys.stdout.write("multi)")
else:
    sys.stdout.write("mono)")

sys.stdout.write("... ")
sys.stdout.flush()

try:
    subprocess.check_output(["make",
        "clean",
        "-C",
        "@abs_top_builddir@/src"],
        stderr=subprocess.STDOUT)

    os.chdir("@abs_top_builddir@/src")
    if args.new_parser:
        subprocess.check_output([readeq, "-o", "matrices.inc", eqfile],
                stderr=subprocess.STDOUT)
    else:
        subprocess.check_output(["@PERL@", readeq, eqfile],
                stderr=subprocess.STDOUT)
    os.chdir(oldwd)

    subprocess.check_output(["make",
        "grid.o",
        "eigensolve.o",
        "inputs.o",
        "matrices.o",
        "mod_blacs.o",
        "model.o",
        "ester-interface.o",
        "postproc.o",
        "legpy.so",
        "-C",
        "@abs_top_builddir@/src",
        "model=" + args.model,
        flags],
        stderr=subprocess.STDOUT)

    subprocess.check_output(["mkdir",
        "-p",
        "@abs_top_builddir@/src/lib"],
        stderr=subprocess.STDOUT)

    subprocess.check_output(["@F2PY@",
        "--f90exec=@FC@",
        "-I@abs_top_builddir@",
        "-I@abs_top_builddir@/src",
        "-I@abs_top_builddir@/lib/itemlist",
        "-I@abs_top_builddir@/lib/legendre",
        "-I@abs_top_builddir@/lib/getpar",
        "-I@abs_top_builddir@/lib/der",
        "-L@libdir@",
        f2py_def,
        "-c",
        "-m",
        os.path.basename(eqfile),
        "-lgetpar",
        "-llegendre",
        "-larnoldi",
        "-lder",
        "-lfit",
        "-litemlist",
        "-llapack_extra",
        "@libs@",
        "@abs_top_builddir@/src/eigensolve.o",
        "@abs_top_builddir@/src/grid.o",
        "@abs_top_builddir@/src/matrices.o",
        "@abs_top_builddir@/src/mod_blacs.o",
        "@abs_top_builddir@/src/abstract_model.o",
        "@abs_top_builddir@/src/model.o",
        "@abs_top_builddir@/src/ester-interface.o",
        "@abs_top_builddir@/src/postproc.o",
        "@abs_top_builddir@/src/hpsort_index.o",
        "@abs_top_srcdir@/src/python.F90",
        "@abs_top_srcdir@/src/config.F90",
        "@abs_top_builddir@/src/inputs.F90"],
        stderr=subprocess.STDOUT)

    shutil.copy(os.path.basename(eqfile) + '.so',
            '@abs_top_builddir@/src/lib/' + os.path.basename(eqfile) + '.so')
    os.remove(os.path.basename(eqfile) + '.so')

    # if args.debug == False:
    #     subprocess.check_output(["make",
    #         "uninstall",
    #         "-C",
    #         "@abs_top_builddir@/src"],
    #         stderr=subprocess.STDOUT)

    print("[OK]")
    # if args.debug:
    #     print('Debug binary location: @abs_top_builddir@/src/debug/top-debug')
    sys.exit(0)

except subprocess.CalledProcessError as e:
    print("[Failed]")
    os.chdir(oldwd)
    f = open('top-build.err', 'w')
    print('Check `top-build.err\'')
    try:
        f.write(e.output.decode())
    except:
        f.write(e.output)
    f.close()
    sys.exit(1)

except Exception as e:
    print("[Failed]")
    print(e)
    sys.exit(1)
