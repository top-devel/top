#!@PYTHON@

if __name__ == '__main__':
    import sys
    import os.path
    import subprocess as sp

    try:
        from colorama import Fore, Style
        red = Fore.RED
        green = Fore.GREEN
        reset = Style.RESET_ALL
        bold = Style.BRIGHT
    except:
        red = ""
        green = ""
        reset = ""
        bold = ""


    tests = [ # name, model, equation_file, order, test_file
            ('eq_cesam_all_lagrange_avg_1D (real 1D mono)',
                'cesam',
                'eq_cesam_all_lagrange_avg_1D',
                'order-cesam-1D.inc',
                'check1D'),
            ]
    enable_parser = '@enable_parser@'
    if enable_parser == 'yes':
        tests.append(
            ('cesam1D.eq (real 1D mono)',
                'cesam',
                'cesam1D.eq',
                'order-cesam-1D.inc',
                'check-parser-1D'))

    fnull = open(os.devnull, 'w')

    for name, model, eq_file, order, test in tests:
        try:
            print('Checking %s: ' % name)
            print('  Build: '),
            sys.stdout.flush()
            cmd = '@prefix@/bin/top-build'
            if eq_file.endswith(".eq"):
                cmd += ' --parser'
            if order != None:
                cmd += ' --order=@abs_top_builddir@/examples/%s/%s' % \
                    (model, order)
            cmd += ' --model=%s' % model
            cmd += ' @abs_top_builddir@/examples/%s/%s' % (model, eq_file)

            sp.check_call(cmd.split(),
                    stdout=fnull,
                    stderr=fnull)

            print(green + '[Ok]'),
            print(reset)

            print('  Run:   '),
            sys.stdout.flush()
            test_file = '@abs_top_builddir@/examples/%s/%s.py' % (model, test)
            if os.path.exists(test_file):
                sp.check_call(['@PYTHON@',
                    test_file],
                    stdout=fnull,
                    stderr=fnull)
                print(green + '[Ok]'),
                print(reset)
            else:
                print(red + 'no test provided'),
                print(reset)

        except sp.CalledProcessError as e:
            print(red + bold + '[Failed]'),
            print(reset)
